import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
import pandas as pd
import os
import shutil

from PIL import Image

# define simple logging functionality
log_fw = open("info.txt", 'w') # open log file to save log outputs
def log(text):     # define a logging function to trace the training process
    print(text)
    log_fw.write(str(text)+'\n')
    log_fw.flush()

log('Tiles were generated by PyHIST')

# model
model = models.vgg19_bn()
IN_FEATURES = model.classifier[-1].in_features
final_fc = nn.Linear(IN_FEATURES, 9)
model.classifier[-1] = final_fc

# transforms
test_transforms = transforms.Compose([
                  transforms.Resize((224, 224)),
                  transforms.ToTensor(),
                  transforms.Normalize(mean = [0.485, 0.456, 0.406], std = [0.229, 0.224, 0.225])
                                ])

# Configurations
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
raw_root = '/staging/biology/u1307362/pyhist/CPTAC-COAD'
tumor_root = '/staging/biology/u1307362/CPTAC-COAD_raw_tumor_patch/vgg19_bn/TCGA-HE-89K'
classes = ['ADI', 'BACK', 'DEB', 'LYM', 'MUC', 'MUS', 'NORM', 'STR', 'TUM']

# prediction
model.load_state_dict(torch.load('/staging/biology/u1307362/tumor_detection_model/vgg19_bn/TCGA-HE-89K/Vgg19_bn.pt'))
model = model.to(device)
model.eval()
with torch.no_grad():
    name, tum_num, all_num = [], [], []
    for svs in os.listdir(raw_root):
        try:
            os.mkdir(os.path.join(tumor_root, svs))
            num_TUM = 0
            num_ALL = len(os.listdir(os.path.join(raw_root, svs, svs + '_tiles')))
            for tile in os.listdir(os.path.join(raw_root, svs, svs + '_tiles')):
                img = Image.open(os.path.join(raw_root, svs, svs + '_tiles', tile))
                img_t = test_transforms(img)
                patch = torch.unsqueeze(img_t, 0)
                patch = patch.to(device)
                outputs = model(patch)
                _, predicted = torch.max(outputs, 1)
                if classes[predicted[0]] == 'TUM':
                    num_TUM += 1
                    shutil.copy(os.path.join(raw_root, svs, svs + '_tiles', tile), os.path.join(tumor_root, svs))
            # info.txt
            log(f'{svs} : tumor({num_TUM}), all({num_ALL})')
            # info.csv
            name.append(svs)
            tum_num.append(num_TUM)
            all_num.append(num_ALL)
        except:
            log(f'{svs} : Error')

# info.csv
csv = {'ID' : name, 'num_TUM' : tum_num, 'num_ALL' : all_num}
df = pd.DataFrame(csv)
df.to_csv('info.csv')